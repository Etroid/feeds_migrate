<?php

/**
 * @file
 * feeds_migrate.module
 */

use Drupal\feeds_migrate\Entity\FeedsMigrateImporter;
use Drupal\migrate\Plugin\migrate\destination\EntityContentBase;
use \Drupal\feeds_migrate\Plugin\migrate\destination\Form\EntityContentOptionForm;

/**
 * Implements hook_cron().
 */
function feeds_migrate_cron() {
  $request_time = \Drupal::time()->getRequestTime();
  $queue = \Drupal::queue('feeds_migrate_importer');

  /** @var FeedsMigrateImporter $importer */
  foreach (FeedsMigrateImporter::loadMultiple() as $importer) {
    if ($importer->needsImported() && $queue->createItem($importer->id())) {
      // Add timestamp to avoid queueing item more than once.
      $importer->lastRan = $request_time;
      $importer->save();
    }
  }
}

/**
 * Implements hook_migrate_source_info_alter().
 *
 * Defines form classes for source plugins.
 */
function feeds_migrate_migrate_source_info_alter(array &$plugins) {
  /* @var \Drupal\feeds_migrate\Plugin\SourceFormPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.feeds_migrate.source.form');
  $form_plugins = $manager->getDefinitions();

  // Iterate over each source form plugin and attach it to its parent plugin.
  foreach ($form_plugins as $form_plugin) {
    $parent_plugin_id = $form_plugin['parent'] ?? FALSE;
    $type = $form_plugin['type'] ?? 'configuration';
    if ($parent_plugin_id && $type && array_key_exists($parent_plugin_id, $plugins)) {
      $plugins[$parent_plugin_id]['feeds_migrate']['form'][$type] = $form_plugin['class'];
    }
  }
}

/**
 * Implements hook_migrate_data_fetcher_info_alter().
 *
 * Defines form classes for data fetcher plugins.
 */
function feeds_migrate_data_fetcher_info_alter(array &$plugins) {
  /* @var \Drupal\feeds_migrate\Plugin\DataFetcherFormPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.feeds_migrate.data_fetcher.form');
  $form_plugins = $manager->getDefinitions();

  // Iterate over each data_fetcher form plugin and attach it to its parent plugin.
  foreach ($form_plugins as $form_plugin) {
    $parent_plugin_id = $form_plugin['parent'] ?? FALSE;
    $type = $form_plugin['type'] ?? 'configuration';
    if ($parent_plugin_id && $type && array_key_exists($parent_plugin_id, $plugins)) {
      $plugins[$parent_plugin_id]['feeds_migrate']['form'][$type] = $form_plugin['class'];
    }
  }
}

/**
 * Implements hook_migrate_data_parser_info_alter().
 *
 * Defines form classes for data parser plugins.
 */
function feeds_migrate_data_parser_info_alter(array &$plugins) {
  /* @var \Drupal\feeds_migrate\Plugin\DataParserFormPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.feeds_migrate.data_parser.form');
  $form_plugins = $manager->getDefinitions();

  // Iterate over each data_parser form plugin and attach it to its parent plugin.
  foreach ($form_plugins as $form_plugin) {
    $parent_plugin_id = $form_plugin['parent'] ?? FALSE;
    $type = $form_plugin['type'] ?? 'configuration';
    if ($parent_plugin_id && $type && array_key_exists($parent_plugin_id, $plugins)) {
      $plugins[$parent_plugin_id]['feeds_migrate']['form'][$type] = $form_plugin['class'];
    }
  }
}

/**
 * Implements hook_migrate_destination_info_alter().
 *
 * Defines form classes for destination plugins.
 */
function feeds_migrate_migrate_destination_info_alter(array &$plugins) {
  // Add option form to all Entity Content Base destination plugins.
  foreach ($plugins as &$plugin) {
    if ($plugin['class'] == EntityContentBase::class || is_subclass_of($plugin['class'], EntityContentBase::class)) {
      // Specify option form class for content entity destinations.
      $plugin['feeds_migrate']['form']['option'] = EntityContentOptionForm::class;
    }
  }

  /* @var \Drupal\feeds_migrate\Plugin\DestinationFormPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.feeds_migrate.destination.form');
  $form_plugins = $manager->getDefinitions();

  // Iterate over each destination form plugin and attach it to its parent plugin.
  foreach ($form_plugins as $form_plugin) {
    $parent_plugin_id = $form_plugin['parent'] ?? FALSE;
    $type = $form_plugin['type'] ?? 'configuration';
    if ($parent_plugin_id && $type && array_key_exists($parent_plugin_id, $plugins)) {
      $plugins[$parent_plugin_id]['feeds_migrate']['form'][$type] = $form_plugin['class'];
    }
  }
}

/**
 * Implements hook_migrate_process_info_alter().
 *
 * Defines form classes for process plugins.
 */
function feeds_migrate_migrate_process_info_alter(array &$plugins) {
  /* @var \Drupal\feeds_migrate\Plugin\ProcessFormPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.feeds_migrate.process.form');
  $form_plugins = $manager->getDefinitions();

  // Iterate over each process form plugin and attach it to its parent plugin.
  foreach ($form_plugins as $form_plugin) {
    $parent_plugin_id = $form_plugin['parent'] ?? FALSE;
    $type = $form_plugin['type'] ?? 'configuration';
    if ($parent_plugin_id && $type && array_key_exists($parent_plugin_id, $plugins)) {
      $plugins[$parent_plugin_id]['feeds_migrate']['form'][$type] = $form_plugin['class'];
    }
  }
}
